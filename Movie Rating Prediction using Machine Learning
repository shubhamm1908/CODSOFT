import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import seaborn as sns
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("IMDb Movies India.csv", encoding='ISO-8859-1')

# Drop rows with missing target
df = df.dropna(subset=["Rating"])

# Fill missing categorical values
for col in ["Genre", "Director", "Actor 1", "Actor 2", "Actor 3"]:
    df[col] = df[col].fillna("Unknown")

# Convert Genre to list
df["Genre"] = df["Genre"].apply(lambda x: x.split(", "))

# Encode genres using MultiLabelBinarizer
mlb = MultiLabelBinarizer()
genre_encoded = pd.DataFrame(mlb.fit_transform(df["Genre"]), columns=mlb.classes_, index=df.index)

# Simplify director and actor fields to top 20 + 'Other'
for col in ["Director", "Actor 1", "Actor 2", "Actor 3"]:
    top_20 = df[col].value_counts().nlargest(20).index
    df[col] = df[col].apply(lambda x: x if x in top_20 else "Other")

# One-hot encode director and actors
other_encoded = pd.get_dummies(df[["Director", "Actor 1", "Actor 2", "Actor 3"]])

# Combine all features
X = pd.concat([genre_encoded, other_encoded], axis=1)
y = df["Rating"]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Feature importance plot (with fix)
importances = model.feature_importances_
features = X.columns
importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
top_features = importance_df.sort_values(by="Importance", ascending=False).head(15)

plt.figure(figsize=(10, 6))
sns.barplot(data=top_features, x="Importance", y="Feature", hue="Feature", palette="viridis", dodge=False, legend=False)
plt.title("Top 15 Important Features for Movie Rating Prediction")
plt.tight_layout()
plt.show()

# Actual vs Predicted Ratings Plot
plt.figure(figsize=(6, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)
plt.xlabel("Actual Rating")
plt.ylabel("Predicted Rating")
plt.title("Actual vs Predicted Movie Ratings")
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.tight_layout()
plt.show()
